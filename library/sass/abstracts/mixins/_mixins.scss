// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Wrap and center elements
@mixin wrap($max-width: $size__site-narrow) {

	@media screen and ($large-up) {
		margin-left: auto;
		margin-right: auto;
		max-width: $max-width;
	}
}

// Full-width element that breaks container
@mixin full-width($container: $size__site-narrow, $wider: false) {
	margin-left: -1rem;
	margin-right: -1rem;
	width: auto; // reset

	img {
		width: 100%;
	}

	@media screen and ($medium-up) and ($large-down) {
		$padding: 1rem;
		left: 50%;
		margin-left: calc(-50vw + ($padding * 0.5) - 1px ); // not sure why 1px
		margin-right: calc(-50vw + ($padding * 0.5) );
		max-width: calc(100vw - $padding);
		position: relative;
		right: 50%;
		width: 100vw;
	}

	@media screen and ($xlarge-up) {
		margin-left: -($size__site-wide - $container) / 2;
		margin-right: -($size__site-wide - $container) / 2;
		max-width: $size__site-wide;
	}

	@if ($wider == true) {

		@media screen and ($xxlarge-up) {
			margin-left: -($size__site-wider - $container) / 2;
			margin-right: -($size__site-wider - $container) / 2;
			max-width: $size__site-wider;
		}
	}
}

// Image is square-ish on mobile, when combined with full-width()
%square-ish {

	img {
		min-height: 21rem;
		object-fit: cover;
	}
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get($columns, $numberColumns) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// Grid Layouts
@mixin grid($style: null, $itemClass: '.thumbnail') {
	display: grid;

	@if ($style == 'mixed') {
		grid-gap: 0.25rem;
		grid-template-columns: repeat(4, 1fr);
		grid-template-rows: repeat(2, 1fr);
		grid-template-areas:
			"big1 big1 reg2 reg4"
			"big1 big1 reg3 reg5"
			"big6 big6 reg7 reg9"
			"big6 big6 reg8 reg10"
			"reg11 big13 big13 reg14"
			"reg12 big13 big13 reg15";
		padding-bottom: 0.25rem;

		#{$itemClass}:nth-child(1) {
		  grid-area: big1;
		}
		#{$itemClass}:nth-child(2) {
		  grid-area: reg2;
		}
		#{$itemClass}:nth-child(3) {
		  grid-area: reg3;
		}
		#{$itemClass}:nth-child(4) {
		  grid-area: reg4;
		}
		#{$itemClass}:nth-child(5) {
		  grid-area: reg5;
		}
		#{$itemClass}:nth-child(6) {
		  grid-area: big6;
		}
		#{$itemClass}:nth-child(7) {
		  grid-area: reg7;
		}
		#{$itemClass}:nth-child(8) {
		  grid-area: reg8;
		}
		#{$itemClass}:nth-child(9) {
		  grid-area: reg9;
		}
		#{$itemClass}:nth-child(10) {
		  grid-area: reg10;
		}
		#{$itemClass}:nth-child(11) {
		  grid-area: reg11;
		}
		#{$itemClass}:nth-child(12) {
		  grid-area: reg12;
		}
		#{$itemClass}:nth-child(13) {
		  grid-area: big13;
		}
		#{$itemClass}:nth-child(14) {
		  grid-area: reg14;
		}
		#{$itemClass}:nth-child(15) {
		  grid-area: reg15;
		}

		@media screen and ($medium-up) {
			grid-template-columns: repeat(6, 1fr);
			grid-template-rows: repeat(2, 1fr);
			grid-template-areas:
				"big1 big1 reg2 reg4 big6 big6"
				"big1 big1 reg3 reg5 big6 big6"
				"reg7 reg9 reg11 big13 big13 reg14"
				"reg8 reg10 reg12 big13 big13 reg15";
		}
	} @else if ($style == 'three')  {
		grid-gap: 2rem;

		@media screen and ($medium-up) {
			grid-template-columns: 30% 30% 30%;
		}
	} @else {
		grid-gap: 2rem;

		@media screen and ($small-up) {
			grid-template-columns: 1fr 1fr;
		}

		@media screen and ($medium-up) {
			grid-template-columns: 1fr 1fr 1fr;
		}
	}
}

// Button
@mixin button($type: null, $style: null) {
	border-radius: $radius-sm;
	cursor: pointer;
	display: inline-block;
	font-family: var(--font__alt);
	font-weight: normal;
	line-height: 1;
	text-decoration: none;
	white-space: nowrap;

	&:hover,
	&:active,
	&:focus {
		box-shadow: 3px 3px 3px rgba($dark, 0.25), -3px -3px 3px var(--color__background-alt);
	}

	&:hover {
		border-color: var(--color__border-button-hover);
	}

	@if ($style == 'fill') {
		background-color: var(--color__background-button-fill);
		border-color: var(--color__border-button); // color must be set *after* other border stuff, I think
		color: var(--color__button-fill);

		&:hover {
			color: var(--color__button-fill);
		}
	} @else {
		background: var(--color__background-button);
		border: 2px solid;
		border-color: var(--color__border-button);
		color: var(--color__button);
	}

	@if ($type == 'tag') {
		font-size: $typesize__tiny;
		letter-spacing: $font__letter-spacing;
		margin-right: 0.5rem;
		margin-bottom: 0.5rem;
		padding: 0.55em 1em 0.375em;
		text-transform: uppercase;
	} @else {
		padding: 0.6em 1em;
	}
}